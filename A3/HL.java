/* Generated By:JJTree&JavaCC: Do not edit this line. HL.java */
public class HL/*@bgen(jjtree)*/implements HLTreeConstants, HLConstants {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

  static final public SimpleNode start() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
    case LPAREN:
    case FOR:
    case FOREACH:
    case FUN:
    case IF:
    case PRINT:
    case RETURN:
    case STOP:
    case VAR:
    case WHILE:
    case X:
    case INTEGER:
    case BOOLEAN:
    case IDENTIFIER:
      S();
     {if (true) return (SimpleNode) (jjtree.popNode());}
      break;
    case 0:
      jj_consume_token(0);
            {if (true) throw new ParseException("End of File.");}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void S() throws ParseException {
    if (jj_2_1(2147483647)) {
      id_statement();
    } else if (jj_2_2(2147483647)) {
      expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void id_statement() throws ParseException {
    if (jj_2_3(2)) {
      fn_call();
      jj_consume_token(SEMICOL);
    } else if (jj_2_4(2)) {
      assignment();
      jj_consume_token(SEMICOL);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FOR:
      case FOREACH:
      case FUN:
      case IF:
      case PRINT:
      case RETURN:
      case STOP:
      case VAR:
      case WHILE:
        statement();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var_decl();
      jj_consume_token(SEMICOL);
      break;
    case FUN:
      fn_decl();
      jj_consume_token(SEMICOL);
      break;
    case IF:
      jj_consume_token(IF);
      if_stat();
      jj_consume_token(FI);
      jj_consume_token(SEMICOL);
      break;
    case FOR:
      for_stat();
      jj_consume_token(SEMICOL);
      break;
    case FOREACH:
      foreach_stat();
      jj_consume_token(SEMICOL);
      break;
    case WHILE:
      while_stat();
      jj_consume_token(SEMICOL);
      break;
    case STOP:
      stop_stat();
      jj_consume_token(SEMICOL);
      break;
    case PRINT:
      print_stat();
      jj_consume_token(SEMICOL);
      break;
    case RETURN:
      return_stat();
      jj_consume_token(SEMICOL);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
                   /*@bgen(jjtree) var_decl */
  ASTvar_decl jjtn000 = new ASTvar_decl(JJTVAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAR);
      indent_list();
      type_decl();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void indent_list() throws ParseException {
                      /*@bgen(jjtree) indent_list */
  ASTindent_list jjtn000 = new ASTindent_list(JJTINDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
  ASTidentlist jjtn001 = new ASTidentlist(JJTIDENTLIST);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
      try {
        Identifier();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_1;
          }
          jj_consume_token(COMMA);
          Identifier();
        }
      } catch (Throwable jjte001) {
  if (jjtc001) {
    jjtree.clearNodeScope(jjtn001);
    jjtc001 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte001 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte001;}
  }
  if (jjte001 instanceof ParseException) {
    {if (true) throw (ParseException)jjte001;}
  }
  {if (true) throw (Error)jjte001;}
      } finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
  }
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void type_decl() throws ParseException {
    jj_consume_token(AS);
    type();
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    ASTINT jjtn001 = new ASTINT(JJTINT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(INT);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case BOOL:
                 ASTBOOL jjtn002 = new ASTBOOL(JJTBOOL);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(BOOL);
      } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
      }
      break;
    case POLYN:
                                ASTPOL jjtn003 = new ASTPOL(JJTPOL);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(POLYN);
      } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fn_decl() throws ParseException {
                  /*@bgen(jjtree) fn_decl */
  ASTfn_decl jjtn000 = new ASTfn_decl(JJTFN_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUN);
      Identifier();
      jj_consume_token(LPAREN);
      param_decls();
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        type_decl();
        body();
        break;
      default:
        jj_la1[5] = jj_gen;
                                                                                                     ASTNOTHING jjtn001 = new ASTNOTHING(JJTNOTHING);
                                                                                                     boolean jjtc001 = true;
                                                                                                     jjtree.openNodeScope(jjtn001);
        try {
          body();
        } catch (Throwable jjte001) {
                                                                                                     if (jjtc001) {
                                                                                                       jjtree.clearNodeScope(jjtn001);
                                                                                                       jjtc001 = false;
                                                                                                     } else {
                                                                                                       jjtree.popNode();
                                                                                                     }
                                                                                                     if (jjte001 instanceof RuntimeException) {
                                                                                                       {if (true) throw (RuntimeException)jjte001;}
                                                                                                     }
                                                                                                     if (jjte001 instanceof ParseException) {
                                                                                                       {if (true) throw (ParseException)jjte001;}
                                                                                                     }
                                                                                                     {if (true) throw (Error)jjte001;}
        } finally {
                                                                                                     if (jjtc001) {
                                                                                                       jjtree.closeNodeScope(jjtn001, true);
                                                                                                     }
        }
      }
      jj_consume_token(NUF);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void param_decls() throws ParseException {
                      /*@bgen(jjtree) param_decls */
  ASTparam_decls jjtn000 = new ASTparam_decls(JJTPARAM_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      param_decl();
      label_2:
      while (true) {
        if (jj_2_5(2)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COMMA);
        param_decl();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void param_decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Identifier();
      type_decl();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void body() throws ParseException {
               /*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case FOREACH:
        case FUN:
        case IF:
        case PRINT:
        case RETURN:
        case STOP:
        case VAR:
        case WHILE:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        id_statement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void assignment() throws ParseException {
                     /*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(ASSIGN);
      arithm();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void if_stat() throws ParseException {
                 /*@bgen(jjtree) if_stat */
  ASTif_stat jjtn000 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2)) {
        fn_call();
      } else if (jj_2_7(2)) {
        logical_condition();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(THEN);
      clause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELIF:
        jj_consume_token(ELIF);
        if_stat();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      if (jj_2_8(2)) {
        jj_consume_token(ELSE);
        clause();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void elifs() throws ParseException {
    label_4:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(ELIF);
      logical_condition();
      jj_consume_token(THEN);
      clause();
    }
  }

  static final public void clause() throws ParseException {
                /*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      body();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void for_stat() throws ParseException {
                   /*@bgen(jjtree) for_stat */
  ASTfor_stat jjtn000 = new ASTfor_stat(JJTFOR_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      Identifier();
      jj_consume_token(FROM);
      arithm();
      jj_consume_token(TO);
      arithm();
      label_5:
      while (true) {
        if (jj_2_10(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(BY);
        arithm();
      }
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void foreach_stat() throws ParseException {
                       /*@bgen(jjtree) foreach_stat */
  ASTforeach_stat jjtn000 = new ASTforeach_stat(JJTFOREACH_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOREACH);
      Identifier();
      jj_consume_token(IN);
      arithm();
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void while_stat() throws ParseException {
                     /*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      logical_condition();
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void fn_call() throws ParseException {
                  /*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
      case LPAREN:
      case X:
      case INTEGER:
      case BOOLEAN:
      case IDENTIFIER:
        parameters();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void parameters() throws ParseException {
                     /*@bgen(jjtree) parameters */
  ASTparameters jjtn000 = new ASTparameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      arithm();
      label_6:
      while (true) {
        if (jj_2_11(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        arithm();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void stop_stat() throws ParseException {
                    /*@bgen(jjtree) stop_stat */
  ASTstop_stat jjtn000 = new ASTstop_stat(JJTSTOP_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STOP);
      Identifier();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void return_stat() throws ParseException {
                      /*@bgen(jjtree) return_stat */
  ASTreturn_stat jjtn000 = new ASTreturn_stat(JJTRETURN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUB:
        case LPAREN:
        case X:
        case INTEGER:
        case BOOLEAN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_7;
        }
        arithm();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void print_stat() throws ParseException {
                     /*@bgen(jjtree) print_stat */
  ASTprint_stat jjtn000 = new ASTprint_stat(JJTPRINT_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      print_paren();
      label_8:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(COMMA);
        print_paren();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void print_paren() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      String();
      break;
    case ADD:
    case SUB:
    case LPAREN:
    case X:
    case INTEGER:
    case BOOLEAN:
    case IDENTIFIER:
      arithm();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void logical_condition() throws ParseException {
    or_condition();
  }

  static final public void or_condition() throws ParseException {
    and_condition();
    if (jj_2_13(2)) {
      jj_consume_token(OR);
      or_condition();
    } else {
      ;
    }
  }

  static final public void and_condition() throws ParseException {
    not_condition();
    if (jj_2_14(2)) {
      jj_consume_token(AND);
      and_condition();
    } else {
      ;
    }
  }

  static final public void not_condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      not_condition();
      if (jj_2_15(2)) {
        jj_consume_token(NOT);
        not_condition();
      } else {
        ;
      }
      break;
    case ADD:
    case SUB:
    case LPAREN:
    case X:
    case INTEGER:
    case BOOLEAN:
    case IDENTIFIER:
      condition();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    if (jj_2_16(2147483647)) {
      comparison();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        jj_consume_token(LPAREN);
        logical_condition();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void comparison() throws ParseException {
    arithm();
    if (jj_2_17(2)) {
                          ASTisa jjtn001 = new ASTisa(JJTISA);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
      try {
        isatype();
      } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
      }
    } else if (jj_2_18(2)) {
      comparator();
      arithm();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
   ASTEQ jjtn001 = new ASTEQ(JJTEQ);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(EQ);
      } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
      }
      break;
    case LT:
                ASTLT jjtn002 = new ASTLT(JJTLT);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(LT);
      } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
      }
      break;
    case GT:
                             ASTGT jjtn003 = new ASTGT(JJTGT);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(GT);
      } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003, true);
                             }
      }
      break;
    case LE:
                                          ASTLE jjtn004 = new ASTLE(JJTLE);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(LE);
      } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004, true);
                                          }
      }
      break;
    case GE:
                                                       ASTGE jjtn005 = new ASTGE(JJTGE);
                                                       boolean jjtc005 = true;
                                                       jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(GE);
      } finally {
                                                       if (jjtc005) {
                                                         jjtree.closeNodeScope(jjtn005, true);
                                                       }
      }
      break;
    case NE:
                                                                    ASTNE jjtn006 = new ASTNE(JJTNE);
                                                                    boolean jjtc006 = true;
                                                                    jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(NE);
      } finally {
                                                                    if (jjtc006) {
                                                                      jjtree.closeNodeScope(jjtn006, true);
                                                                    }
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void isatype() throws ParseException {
    jj_consume_token(ISA);
    type();
  }

  static final public void expression() throws ParseException {
    arithm();
    jj_consume_token(SEMICOL);
  }

  static final public void arithm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case SUB:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
                 ASTplus jjtn001 = new ASTplus(JJTPLUS);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(ADD);
        } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
        }
        break;
      case SUB:
                                 ASTminus jjtn002 = new ASTminus(JJTMINUS);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(SUB);
        } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002, true);
                                 }
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
                                                   ASTsum jjtn005 = new ASTsum(JJTSUM);
                                                   boolean jjtc005 = true;
                                                   jjtree.openNodeScope(jjtn005);
    try {
      op_perform();
      label_9:
      while (true) {
        if (jj_2_19(2)) {
          ;
        } else {
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
                                                                                ASTplus jjtn003 = new ASTplus(JJTPLUS);
                                                                                boolean jjtc003 = true;
                                                                                jjtree.openNodeScope(jjtn003);
          try {
            jj_consume_token(ADD);
          } finally {
                                                                                if (jjtc003) {
                                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                                }
          }
          break;
        case SUB:
                                                                                                ASTminus jjtn004 = new ASTminus(JJTMINUS);
                                                                                                boolean jjtc004 = true;
                                                                                                jjtree.openNodeScope(jjtn004);
          try {
            jj_consume_token(SUB);
          } finally {
                                                                                                if (jjtc004) {
                                                                                                  jjtree.closeNodeScope(jjtn004, true);
                                                                                                }
          }
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        op_perform();
      }
    } catch (Throwable jjte005) {
                                                   if (jjtc005) {
                                                     jjtree.clearNodeScope(jjtn005);
                                                     jjtc005 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte005 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte005;}
                                                   }
                                                   if (jjte005 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte005;}
                                                   }
                                                   {if (true) throw (Error)jjte005;}
    } finally {
                                                   if (jjtc005) {
                                                     jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 2);
                                                   }
    }
  }

  static final public void op_perform() throws ParseException {
  ASTproduct jjtn003 = new ASTproduct(JJTPRODUCT);
  boolean jjtc003 = true;
  jjtree.openNodeScope(jjtn003);
    try {
      exp();
      label_10:
      while (true) {
        if (jj_2_20(2)) {
          ;
        } else {
          break label_10;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROD:
                        ASTtimes jjtn001 = new ASTtimes(JJTTIMES);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(PROD);
          } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
          }
          break;
        case DIV:
                                        ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
          try {
            jj_consume_token(DIV);
          } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002, true);
                                        }
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        exp();
      }
    } catch (Throwable jjte003) {
  if (jjtc003) {
    jjtree.clearNodeScope(jjtn003);
    jjtc003 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte003 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte003;}
  }
  if (jjte003 instanceof ParseException) {
    {if (true) throw (ParseException)jjte003;}
  }
  {if (true) throw (Error)jjte003;}
    } finally {
  if (jjtc003) {
    jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 2);
  }
    }
  }

  static final public void exp() throws ParseException {
  ASTexp jjtn001 = new ASTexp(JJTEXP);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
    try {
      term();
      label_11:
      while (true) {
        if (jj_2_21(2)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(EXP);
        term();
      }
    } catch (Throwable jjte001) {
  if (jjtc001) {
    jjtree.clearNodeScope(jjtn001);
    jjtc001 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte001 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte001;}
  }
  if (jjte001 instanceof ParseException) {
    {if (true) throw (ParseException)jjte001;}
  }
  {if (true) throw (Error)jjte001;}
    } finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
  }
    }
  }

  static final public void term() throws ParseException {
    if (jj_2_22(2)) {
      jj_consume_token(LPAREN);
      arithm();
      jj_consume_token(RPAREN);
    } else if (jj_2_23(2)) {
      fn_call();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
      case X:
      case INTEGER:
      case BOOLEAN:
      case IDENTIFIER:
        simple_term();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_24(2)) {
                ASTindexed jjtn001 = new ASTindexed(JJTINDEXED);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(LSQUARE);
      } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
      }
      arithm();
      jj_consume_token(RSQUARE);
    } else {
      ;
    }
  }

  static final public void simple_term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      Identifier();
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_25(2)) {
        polyn();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          Integer();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void polyn() throws ParseException {
                /*@bgen(jjtree) polyn */
  ASTpolyn jjtn000 = new ASTpolyn(JJTPOLYN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      ASTplus jjtn001 = new ASTplus(JJTPLUS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
        try {
          jj_consume_token(ADD);
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
        }
        polyn_term();
        break;
      case SUB:
      ASTminus jjtn002 = new ASTminus(JJTMINUS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(SUB);
        } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
        }
        polyn_term();
        break;
      case X:
      case INTEGER:
        polyn_term();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void polyn_term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case X:
      jj_consume_token(X);
      ASTinteger j = new ASTinteger(JJTINTEGER); j.jjtSetToken(new IntegerToken(HLConstants.INTEGER, "1")); jjtree.pushNode(j);
      ASTinteger j2 = new ASTinteger(JJTINTEGER); j2.jjtSetToken(new IntegerToken(HLConstants.INTEGER, "1")); jjtree.pushNode(j2);
      break;
    default:
      jj_la1[24] = jj_gen;
      if (jj_2_26(3)) {
        Integer();
        jj_consume_token(X);
        jj_consume_token(EXP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          arithm();
          jj_consume_token(RPAREN);
          break;
        case ADD:
        case SUB:
        case X:
        case INTEGER:
        case BOOLEAN:
        case IDENTIFIER:
          simple_term();
          break;
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          Integer();
              ASTinteger j3 = new ASTinteger(JJTINTEGER); j3.jjtSetToken(new IntegerToken(HLConstants.INTEGER, "1")); jjtree.pushNode(j3);
          jj_consume_token(X);
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void Identifier() throws ParseException {
                     /*@bgen(jjtree) Identifier */
                     ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 jjtn000.jjtSetToken(t);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void Integer() throws ParseException {
                  /*@bgen(jjtree) Integer */
                  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 jjtn000.jjtSetToken(t);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void String() throws ParseException {
                 /*@bgen(jjtree) String */
                 ASTString jjtn000 = new ASTString(JJTSTRING);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
 jjtn000.jjtSetToken(t);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_3R_18() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(ELIF)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_18()) return true;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(POLYN)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_37()) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(X)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_35()) return true;
    if (jj_scan_token(X)) return true;
    if (jj_scan_token(EXP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_16()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(X)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_scan_token(FUN)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_95()) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    if (jj_scan_token(NUF)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_scan_token(AS)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(PROD)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(LSQUARE)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RSQUARE)) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_3R_37()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(EXP)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_93()) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_26()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_92()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_91()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_90()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_87()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_86()) return true;
    if (jj_scan_token(FI)) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_85()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_84()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_15()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_19()) return true;
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ISA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_19()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(ELIF)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(BY)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_91() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_scan_token(STOP)) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_3R_37()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(OD)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_3R_94()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(OD)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_37()) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_19()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DO)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(OD)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x86001,0x0,0x0,0x800000,0x8000000,0x4000000,0x0,0x0,0x80000000,0x86000,0x86000,0x86000,0x86000,0x80000,0x1f80,0x6000,0x6000,0x6000,0x18000,0x6000,0x0,0x0,0x6000,0x86000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xaf3806c,0x33806c,0x33806c,0x0,0x4100,0x0,0x8000000,0x833806c,0x0,0xac00000,0xac00000,0xec00000,0xac00400,0x0,0x0,0x0,0x0,0x0,0x0,0xac00000,0xa000000,0x800000,0xc00000,0xac00000,0x400000,0x800000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[26];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HL(HLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}

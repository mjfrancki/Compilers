/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HL.jj */
/*@egen*/options {
  IGNORE_CASE=false;
  DEBUG_PARSER = false;
             	                                                                        
               	                                                                                                            
                                  // This will put all your AST classes in the AST directory
}

PARSER_BEGIN(HL)

public class HL/*@bgen(jjtree)*/implements HLTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

/*@egen*/
}

PARSER_END(HL)

TOKEN_MGR_DECLS : 
{

}

SKIP : 
{
  " "     
  | "\t"    
  | "\n"    
  | "\r"
  | < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
  | < "/*" (~["\r"])* "*/" >
}

TOKEN : 
{
        < LT : "<">
|       < LE : "<=">
|       < GT : ">">
|       < GE : ">=">
|       < NE : "<>">
|       < EQ : "==">
|       < ADD : "+">
|       < SUB : "-">
|       < PROD : "*">
|       < DIV : "/">
|       < EXP : "^">
|       < ASSIGN : "=">
|       < LPAREN : "(">
|       < RPAREN : ")">
|       < LSQUARE : "[">
|       < RSQUARE : "]">
|       < COMMA : ",">
|       < SEMICOL : ";">
|	< AND: "and">
|	< AS: "as">
|	< BOOL: "bool">
|	< BY: "by">
|	< DEC: "dec">
|	< DO: "do">
|	< ELIF: "elif">
|	< ELSE: "else">
|	< FI: "fi">
|	< FOR: "for">
|	< FOREACH: "foreach">
|	< FROM: "from">
|	< FUN: "fun">
|	< IF: "if">
|	< IN: "in">               
|	< INT: "int">
|	< ISA: "isa">
|	< NOT: "not">
|	< NUF: "nuf">
|	< OD: "od">
|	< OR: "or">
|	< POLYN: "polyn">
|	< PRINT: "print">
|	< RETURN: "return">
|	< STOP: "stop">
|	< THEN: "then">
|	< TO: "to">
|	< VAR: "var">
|	< WHILE: "while">
|	< X: "x">
|       <INTEGER: (["0"-"9"])+ >
|       <DECIMAL: (["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "." (["0"-"9"])+ "E" ["+","-"] (["0"-"9"])+ >
|       <BOOLEAN: "true" | "false"  | "FALSE"  | "TRUE"  | "False"  | "True" | "tRUe" | "fALse">
|       <STRING: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","r","\\","\'","\""] | ( ["\r", "\n"] | "\r\n")))* "\"">
|       <IDENTIFIER: (["a"-"z","A"-"Z"])((["a"-"z","A"-"Z"])*|["0"-"9"])* >
}



SimpleNode start()      : {}
{
    S()
    {return (SimpleNode) (jjtree.popNode()); }
|   <EOF> { throw new ParseException("End of File.");}
}


void S()        : {}
{ 
  LOOKAHEAD(id_statement())
  id_statement()
| LOOKAHEAD(expression())  
  expression() 

}

void id_statement()       : {}
{ 
    LOOKAHEAD(2) fn_call() <SEMICOL>
|   LOOKAHEAD(2) assignment() <SEMICOL>
|   statement()
}

void statement()       : {}
{ 
    var_decl() <SEMICOL>
|   fn_decl() <SEMICOL>
|   <IF> if_stat() <FI> <SEMICOL>
|   for_stat() <SEMICOL>
|   foreach_stat() <SEMICOL>
|   while_stat() <SEMICOL>
|   stop_stat() <SEMICOL>
|   print_stat() <SEMICOL>
|   return_stat() <SEMICOL>
}

void var_decl() : {/*@bgen(jjtree) var_decl */
  ASTvar_decl jjtn000 = new ASTvar_decl(JJTVAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var_decl */
try {
/*@egen*/ 
<VAR> indent_list() type_decl()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void indent_list() : {/*@bgen(jjtree) indent_list */
  ASTindent_list jjtn000 = new ASTindent_list(JJTINDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) indent_list */
try {
/*@egen*//*@bgen(jjtree) #identlist(> 1) */
{
  ASTidentlist jjtn001 = new ASTidentlist(JJTIDENTLIST);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
}
try {
/*@egen*/
(Identifier() (<COMMA> Identifier())*)/*@bgen(jjtree)*/
} catch (Throwable jjte001) {
  if (jjtc001) {
    jjtree.clearNodeScope(jjtn001);
    jjtc001 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte001 instanceof RuntimeException) {
    throw (RuntimeException)jjte001;
  }
  if (jjte001 instanceof ParseException) {
    throw (ParseException)jjte001;
  }
  throw (Error)jjte001;
} finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
  }
}
/*@egen*/                /*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
   

}

void type_decl()       : {}
{
<AS> type()

}

void type()       : {}
{
(/*@bgen(jjtree) INT */
  {
    ASTINT jjtn001 = new ASTINT(JJTINT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ <INT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/      |/*@bgen(jjtree) BOOL */
               {
                 ASTBOOL jjtn002 = new ASTBOOL(JJTBOOL);
                 boolean jjtc002 = true;
                 jjtree.openNodeScope(jjtn002);
               }
               try {
/*@egen*/ <BOOL>/*@bgen(jjtree)*/
               } finally {
                 if (jjtc002) {
                   jjtree.closeNodeScope(jjtn002, true);
                 }
               }
/*@egen*/       |/*@bgen(jjtree) POL */
                              {
                                ASTPOL jjtn003 = new ASTPOL(JJTPOL);
                                boolean jjtc003 = true;
                                jjtree.openNodeScope(jjtn003);
                              }
                              try {
/*@egen*/ <POLYN>/*@bgen(jjtree)*/
                              } finally {
                                if (jjtc003) {
                                  jjtree.closeNodeScope(jjtn003, true);
                                }
                              }
/*@egen*/     ) 
}

void fn_decl() : {/*@bgen(jjtree) fn_decl */
  ASTfn_decl jjtn000 = new ASTfn_decl(JJTFN_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_decl */
try {
/*@egen*/
<FUN> Identifier() <LPAREN> param_decls() <RPAREN> (LOOKAHEAD(1) type_decl() body() | LOOKAHEAD(1)/*@bgen(jjtree) NOTHING */
                                                                                                   {
                                                                                                     ASTNOTHING jjtn001 = new ASTNOTHING(JJTNOTHING);
                                                                                                     boolean jjtc001 = true;
                                                                                                     jjtree.openNodeScope(jjtn001);
                                                                                                   }
                                                                                                   try {
/*@egen*/ body()/*@bgen(jjtree)*/
                                                                                                   } catch (Throwable jjte001) {
                                                                                                     if (jjtc001) {
                                                                                                       jjtree.clearNodeScope(jjtn001);
                                                                                                       jjtc001 = false;
                                                                                                     } else {
                                                                                                       jjtree.popNode();
                                                                                                     }
                                                                                                     if (jjte001 instanceof RuntimeException) {
                                                                                                       throw (RuntimeException)jjte001;
                                                                                                     }
                                                                                                     if (jjte001 instanceof ParseException) {
                                                                                                       throw (ParseException)jjte001;
                                                                                                     }
                                                                                                     throw (Error)jjte001;
                                                                                                   } finally {
                                                                                                     if (jjtc001) {
                                                                                                       jjtree.closeNodeScope(jjtn001, true);
                                                                                                     }
                                                                                                   }
/*@egen*/         ) <NUF>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/  

}

void param_decls() : {/*@bgen(jjtree) param_decls */
  ASTparam_decls jjtn000 = new ASTparam_decls(JJTPARAM_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decls */
  try {
/*@egen*/
  param_decl() (LOOKAHEAD(2) <COMMA> param_decl())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void param_decl()       : {}
{
  (LOOKAHEAD(1) Identifier() type_decl())?
}

void body() : {/*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) body */
  try {
/*@egen*/
  (LOOKAHEAD(1) id_statement())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void assignment() : {/*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignment */
try {
/*@egen*/
Identifier() <ASSIGN> arithm()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void if_stat() :{/*@bgen(jjtree) if_stat */
  ASTif_stat jjtn000 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) if_stat */
try {
/*@egen*/
(LOOKAHEAD(2) fn_call() | LOOKAHEAD(2) logical_condition()) <THEN> clause() (LOOKAHEAD(1) <ELIF> if_stat())? (LOOKAHEAD(2) <ELSE> clause())?/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void elifs()       : {}
{
(LOOKAHEAD(2) <ELIF> logical_condition() <THEN> clause())* 
}

void clause() :{/*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) clause */
try {
/*@egen*/
body()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/   
}

void for_stat() : {/*@bgen(jjtree) for_stat */
  ASTfor_stat jjtn000 = new ASTfor_stat(JJTFOR_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_stat */
try {
/*@egen*/     
<FOR> Identifier() <FROM> arithm() <TO> arithm() (LOOKAHEAD(2) <BY> arithm())* <DO> body() <OD>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/  

}

void foreach_stat() : {/*@bgen(jjtree) foreach_stat */
  ASTforeach_stat jjtn000 = new ASTforeach_stat(JJTFOREACH_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) foreach_stat */
try {
/*@egen*/
<FOREACH> Identifier() <IN> arithm() <DO> body() <OD>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/  

}

void while_stat() : {/*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) while_stat */
try {
/*@egen*/
<WHILE> logical_condition() <DO> body() <OD>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/  

}

void fn_call() : {/*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_call */
try {
/*@egen*/
Identifier() <LPAREN> (parameters())? <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void parameters() : {/*@bgen(jjtree) parameters */
  ASTparameters jjtn000 = new ASTparameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameters */
  try {
/*@egen*/
  arithm() (LOOKAHEAD(2) <COMMA> arithm())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void stop_stat() : {/*@bgen(jjtree) stop_stat */
  ASTstop_stat jjtn000 = new ASTstop_stat(JJTSTOP_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) stop_stat */
try {
/*@egen*/
<STOP> Identifier()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void return_stat() : {/*@bgen(jjtree) return_stat */
  ASTreturn_stat jjtn000 = new ASTreturn_stat(JJTRETURN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) return_stat */
try {
/*@egen*/
<RETURN> (LOOKAHEAD(1) arithm())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void print_stat() : {/*@bgen(jjtree) print_stat */
  ASTprint_stat jjtn000 = new ASTprint_stat(JJTPRINT_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) print_stat */
try {
/*@egen*/
<PRINT> <LPAREN> print_paren() (LOOKAHEAD(2) <COMMA> print_paren())* <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/  

}

void print_paren()       : {} 
{
  LOOKAHEAD(1) String() 
| arithm()
}

void logical_condition()       : {}
{
   or_condition()
}


void or_condition()       :{}
{
  and_condition() [LOOKAHEAD(2) <OR> or_condition()]
}

void and_condition()       :{}
{
  not_condition() [LOOKAHEAD(2) <AND> and_condition()]
}


void not_condition()       : {}
{
     <NOT> not_condition() [LOOKAHEAD(2) <NOT> not_condition()]
|    condition()
}


void condition()       : {}
{
   LOOKAHEAD(comparison()) comparison() 
|  <LPAREN> logical_condition() <RPAREN> 


}


void comparison()       : {}
{
 arithm() (LOOKAHEAD(2)/*@bgen(jjtree) isa */
                        {
                          ASTisa jjtn001 = new ASTisa(JJTISA);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ isatype()/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
                        }
/*@egen*/      | LOOKAHEAD(2) comparator() arithm())


}

void comparator()       : {}
{
(/*@bgen(jjtree) EQ */
 {
   ASTEQ jjtn001 = new ASTEQ(JJTEQ);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/(<EQ>)/*@bgen(jjtree)*/
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
 }
/*@egen*/     |/*@bgen(jjtree) LT */
              {
                ASTLT jjtn002 = new ASTLT(JJTLT);
                boolean jjtc002 = true;
                jjtree.openNodeScope(jjtn002);
              }
              try {
/*@egen*/ (<LT>)/*@bgen(jjtree)*/
              } finally {
                if (jjtc002) {
                  jjtree.closeNodeScope(jjtn002, true);
                }
              }
/*@egen*/     |/*@bgen(jjtree) GT */
                           {
                             ASTGT jjtn003 = new ASTGT(JJTGT);
                             boolean jjtc003 = true;
                             jjtree.openNodeScope(jjtn003);
                           }
                           try {
/*@egen*/ (<GT>)/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc003) {
                               jjtree.closeNodeScope(jjtn003, true);
                             }
                           }
/*@egen*/     |/*@bgen(jjtree) LE */
                                        {
                                          ASTLE jjtn004 = new ASTLE(JJTLE);
                                          boolean jjtc004 = true;
                                          jjtree.openNodeScope(jjtn004);
                                        }
                                        try {
/*@egen*/ (<LE>)/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc004) {
                                            jjtree.closeNodeScope(jjtn004, true);
                                          }
                                        }
/*@egen*/     |/*@bgen(jjtree) GE */
                                                     {
                                                       ASTGE jjtn005 = new ASTGE(JJTGE);
                                                       boolean jjtc005 = true;
                                                       jjtree.openNodeScope(jjtn005);
                                                     }
                                                     try {
/*@egen*/ (<GE>)/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc005) {
                                                         jjtree.closeNodeScope(jjtn005, true);
                                                       }
                                                     }
/*@egen*/     |/*@bgen(jjtree) NE */
                                                                  {
                                                                    ASTNE jjtn006 = new ASTNE(JJTNE);
                                                                    boolean jjtc006 = true;
                                                                    jjtree.openNodeScope(jjtn006);
                                                                  }
                                                                  try {
/*@egen*/ (<NE>)/*@bgen(jjtree)*/
                                                                  } finally {
                                                                    if (jjtc006) {
                                                                      jjtree.closeNodeScope(jjtn006, true);
                                                                    }
                                                                  }
/*@egen*/     )

}

void isatype()       : {}
{
<ISA> type() 

}

void expression()       :{}
{
arithm() <SEMICOL>

}

void arithm()        : {}
{
(LOOKAHEAD(1) (/*@bgen(jjtree) plus */
               {
                 ASTplus jjtn001 = new ASTplus(JJTPLUS);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*/(<ADD>)/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                 }
               }
/*@egen*/       |/*@bgen(jjtree) minus */
                               {
                                 ASTminus jjtn002 = new ASTminus(JJTMINUS);
                                 boolean jjtc002 = true;
                                 jjtree.openNodeScope(jjtn002);
                               }
                               try {
/*@egen*/ (<SUB>)/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc002) {
                                   jjtree.closeNodeScope(jjtn002, true);
                                 }
                               }
/*@egen*/       ))?/*@bgen(jjtree) #sum(> 2) */
                                                 {
                                                   ASTsum jjtn005 = new ASTsum(JJTSUM);
                                                   boolean jjtc005 = true;
                                                   jjtree.openNodeScope(jjtn005);
                                                 }
                                                 try {
/*@egen*/ (op_perform() (LOOKAHEAD(2) (/*@bgen(jjtree) plus */
                                                                              {
                                                                                ASTplus jjtn003 = new ASTplus(JJTPLUS);
                                                                                boolean jjtc003 = true;
                                                                                jjtree.openNodeScope(jjtn003);
                                                                              }
                                                                              try {
/*@egen*/(<ADD>)/*@bgen(jjtree)*/
                                                                              } finally {
                                                                                if (jjtc003) {
                                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                                }
                                                                              }
/*@egen*/       |/*@bgen(jjtree) minus */
                                                                                              {
                                                                                                ASTminus jjtn004 = new ASTminus(JJTMINUS);
                                                                                                boolean jjtc004 = true;
                                                                                                jjtree.openNodeScope(jjtn004);
                                                                                              }
                                                                                              try {
/*@egen*/ (<SUB>)/*@bgen(jjtree)*/
                                                                                              } finally {
                                                                                                if (jjtc004) {
                                                                                                  jjtree.closeNodeScope(jjtn004, true);
                                                                                                }
                                                                                              }
/*@egen*/       ) op_perform())*)/*@bgen(jjtree)*/
                                                 } catch (Throwable jjte005) {
                                                   if (jjtc005) {
                                                     jjtree.clearNodeScope(jjtn005);
                                                     jjtc005 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte005 instanceof RuntimeException) {
                                                     throw (RuntimeException)jjte005;
                                                   }
                                                   if (jjte005 instanceof ParseException) {
                                                     throw (ParseException)jjte005;
                                                   }
                                                   throw (Error)jjte005;
                                                 } finally {
                                                   if (jjtc005) {
                                                     jjtree.closeNodeScope(jjtn005, jjtree.nodeArity() > 2);
                                                   }
                                                 }
/*@egen*/         

}

void op_perform()       : {}
{/*@bgen(jjtree) #product(> 2) */
{
  ASTproduct jjtn003 = new ASTproduct(JJTPRODUCT);
  boolean jjtc003 = true;
  jjtree.openNodeScope(jjtn003);
}
try {
/*@egen*/
(exp() (LOOKAHEAD(2) (/*@bgen(jjtree) times */
                      {
                        ASTtimes jjtn001 = new ASTtimes(JJTTIMES);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                      }
                      try {
/*@egen*/<PROD>/*@bgen(jjtree)*/
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001, true);
                        }
                      }
/*@egen*/        |/*@bgen(jjtree) div */
                                      {
                                        ASTdiv jjtn002 = new ASTdiv(JJTDIV);
                                        boolean jjtc002 = true;
                                        jjtree.openNodeScope(jjtn002);
                                      }
                                      try {
/*@egen*/ <DIV>/*@bgen(jjtree)*/
                                      } finally {
                                        if (jjtc002) {
                                          jjtree.closeNodeScope(jjtn002, true);
                                        }
                                      }
/*@egen*/      ) exp())*)/*@bgen(jjtree)*/
} catch (Throwable jjte003) {
  if (jjtc003) {
    jjtree.clearNodeScope(jjtn003);
    jjtc003 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte003 instanceof RuntimeException) {
    throw (RuntimeException)jjte003;
  }
  if (jjte003 instanceof ParseException) {
    throw (ParseException)jjte003;
  }
  throw (Error)jjte003;
} finally {
  if (jjtc003) {
    jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 2);
  }
}
/*@egen*/             

}

void exp()      : {}
{/*@bgen(jjtree) #exp(> 1) */
{
  ASTexp jjtn001 = new ASTexp(JJTEXP);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
}
try {
/*@egen*/
(term() (LOOKAHEAD(2) <EXP> term())*)/*@bgen(jjtree)*/
} catch (Throwable jjte001) {
  if (jjtc001) {
    jjtree.clearNodeScope(jjtn001);
    jjtc001 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte001 instanceof RuntimeException) {
    throw (RuntimeException)jjte001;
  }
  if (jjte001 instanceof ParseException) {
    throw (ParseException)jjte001;
  }
  throw (Error)jjte001;
} finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
  }
}
/*@egen*/          

}


void term()       : {}
{
(LOOKAHEAD(2) 
    <LPAREN> arithm() <RPAREN>  
|   LOOKAHEAD(2) fn_call()  
|   simple_term())

(LOOKAHEAD(2)/*@bgen(jjtree) indexed */
              {
                ASTindexed jjtn001 = new ASTindexed(JJTINDEXED);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*/ <LSQUARE>/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                }
              }
/*@egen*/          arithm() <RSQUARE>)?

}


void simple_term()       : {}
{
Identifier() | <BOOLEAN> | LOOKAHEAD(2) polyn() | Integer() 

}

void polyn() : {/*@bgen(jjtree) polyn */
  ASTpolyn jjtn000 = new ASTpolyn(JJTPOLYN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) polyn */
    try {
/*@egen*//*@bgen(jjtree) plus */
    {
      ASTplus jjtn001 = new ASTplus(JJTPLUS);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/
    (<ADD>)/*@bgen(jjtree)*/
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/       polyn_term()
|/*@bgen(jjtree) minus */
    {
      ASTminus jjtn002 = new ASTminus(JJTMINUS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/   (<SUB>)/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/        polyn_term()
|   polyn_term()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/ 

}


void polyn_term()       : {}
{
<X> { ASTinteger j = new ASTinteger(JJTINTEGER); j.jjtSetToken(new IntegerToken(HLConstants.INTEGER, "1")); jjtree.pushNode(j); 
      ASTinteger j2 = new ASTinteger(JJTINTEGER); j2.jjtSetToken(new IntegerToken(HLConstants.INTEGER, "1")); jjtree.pushNode(j2);  }

| LOOKAHEAD(3) Integer() <X> <EXP> (LOOKAHEAD(1) <LPAREN> arithm() <RPAREN> | LOOKAHEAD(1) simple_term())  
| Integer() { ASTinteger j3 = new ASTinteger(JJTINTEGER); j3.jjtSetToken(new IntegerToken(HLConstants.INTEGER, "1")); jjtree.pushNode(j3); } <X> 


}

void Identifier() : {/*@bgen(jjtree) Identifier */
                     ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Identifier */
try {
/*@egen*/ 
t=<IDENTIFIER>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{jjtn000.jjtSetToken(t);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void Integer() : {/*@bgen(jjtree) Integer */
                  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Integer */
try {
/*@egen*/ 
t=<INTEGER>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{jjtn000.jjtSetToken(t);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void String() : {/*@bgen(jjtree) String */
                 ASTString jjtn000 = new ASTString(JJTSTRING);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) String */
try {
/*@egen*/ 
t=<STRING>/*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
}
/*@egen*/
{jjtn000.jjtSetToken(t);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


/* Generated By:JJTree&JavaCC: Do not edit this line. HLConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface HLConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ADD = 5;
  /** RegularExpression Id. */
  int ASSIGN = 6;
  /** RegularExpression Id. */
  int COMMA = 7;
  /** RegularExpression Id. */
  int DIV = 8;
  /** RegularExpression Id. */
  int EQ = 9;
  /** RegularExpression Id. */
  int EXP = 10;
  /** RegularExpression Id. */
  int GE = 11;
  /** RegularExpression Id. */
  int GT = 12;
  /** RegularExpression Id. */
  int LE = 13;
  /** RegularExpression Id. */
  int LT = 14;
  /** RegularExpression Id. */
  int LSQUARE = 15;
  /** RegularExpression Id. */
  int LPAREN = 16;
  /** RegularExpression Id. */
  int NE = 17;
  /** RegularExpression Id. */
  int PROD = 18;
  /** RegularExpression Id. */
  int RSQUARE = 19;
  /** RegularExpression Id. */
  int RPAREN = 20;
  /** RegularExpression Id. */
  int SEMICOL = 21;
  /** RegularExpression Id. */
  int SUB = 22;
  /** RegularExpression Id. */
  int AND = 23;
  /** RegularExpression Id. */
  int AS = 24;
  /** RegularExpression Id. */
  int BOOL = 25;
  /** RegularExpression Id. */
  int BY = 26;
  /** RegularExpression Id. */
  int DEC = 27;
  /** RegularExpression Id. */
  int DO = 28;
  /** RegularExpression Id. */
  int ELIF = 29;
  /** RegularExpression Id. */
  int ELSE = 30;
  /** RegularExpression Id. */
  int FI = 31;
  /** RegularExpression Id. */
  int FOR = 32;
  /** RegularExpression Id. */
  int FOREACH = 33;
  /** RegularExpression Id. */
  int FROM = 34;
  /** RegularExpression Id. */
  int FUN = 35;
  /** RegularExpression Id. */
  int IF = 36;
  /** RegularExpression Id. */
  int IN = 37;
  /** RegularExpression Id. */
  int INT = 38;
  /** RegularExpression Id. */
  int ISA = 39;
  /** RegularExpression Id. */
  int NOT = 40;
  /** RegularExpression Id. */
  int NUF = 41;
  /** RegularExpression Id. */
  int OD = 42;
  /** RegularExpression Id. */
  int OR = 43;
  /** RegularExpression Id. */
  int POLYN = 44;
  /** RegularExpression Id. */
  int PRINT = 45;
  /** RegularExpression Id. */
  int RETURN = 46;
  /** RegularExpression Id. */
  int STOP = 47;
  /** RegularExpression Id. */
  int THEN = 48;
  /** RegularExpression Id. */
  int TO = 49;
  /** RegularExpression Id. */
  int VAR = 50;
  /** RegularExpression Id. */
  int WHILE = 51;
  /** RegularExpression Id. */
  int X = 52;
  /** RegularExpression Id. */
  int PRINTLN = 53;
  /** RegularExpression Id. */
  int DIGIT = 54;
  /** RegularExpression Id. */
  int LETTER = 55;
  /** RegularExpression Id. */
  int BOOLEAN = 56;
  /** RegularExpression Id. */
  int INTEGER = 57;
  /** RegularExpression Id. */
  int IDENTIFIER = 58;
  /** RegularExpression Id. */
  int STRING = 64;
  /** RegularExpression Id. */
  int COMMENT_SINGlE = 71;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int INSTRING = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"+\"",
    "\"=\"",
    "\",\"",
    "\"/\"",
    "\"==\"",
    "\"^\"",
    "\">=\"",
    "\">\"",
    "\"<=\"",
    "\"<\"",
    "\"[\"",
    "\"(\"",
    "\"<>\"",
    "\"*\"",
    "\"]\"",
    "\")\"",
    "\";\"",
    "\"-\"",
    "\"AND\"",
    "\"AS\"",
    "\"BOOL\"",
    "\"BY\"",
    "\"DEC\"",
    "\"DO\"",
    "\"ELIF\"",
    "\"ELSE\"",
    "\"FI\"",
    "\"FOR\"",
    "\"FOREACH\"",
    "\"FROM\"",
    "\"FUN\"",
    "\"IF\"",
    "\"IN\"",
    "\"INT\"",
    "\"ISA\"",
    "\"NOT\"",
    "\"NUF\"",
    "\"OD\"",
    "\"OR\"",
    "\"POLYN\"",
    "\"PRINT\"",
    "\"RETURN\"",
    "\"STOP\"",
    "\"THEN\"",
    "\"TO\"",
    "\"VAR\"",
    "\"WHILE\"",
    "\"X\"",
    "\"PRINTLN\"",
    "<DIGIT>",
    "<LETTER>",
    "<BOOLEAN>",
    "<INTEGER>",
    "<IDENTIFIER>",
    "\"\\\"\"",
    "\"\\\\\\\\\"",
    "\"\\\\\\\"\"",
    "\"\\\\t\"",
    "\"\\\\n\"",
    "\"\\\"\"",
    "<token of kind 65>",
    "<token of kind 66>",
    "<token of kind 67>",
    "<token of kind 68>",
    "<token of kind 69>",
    "<token of kind 70>",
    "<COMMENT_SINGlE>",
  };

}

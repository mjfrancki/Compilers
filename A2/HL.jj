/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. HL.jj */
/*@egen*/options {
  IGNORE_CASE=true;
             	                                                                        

               	                                                                                                            
                                

                                  // This will put all your AST classes in the AST directory

}

PARSER_BEGIN(HL)

public class HL/*@bgen(jjtree)*/implements HLTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

/*@egen*/
}

PARSER_END(HL)

TOKEN_MGR_DECLS :
{
}

SKIP : {
  " "
  | "\t"
  | "\n"
  | "\r"
  }

TOKEN :
{
	< ADD:	"+">
|	< ASSIGN:	"=">
|	< COMMA:	",">
|	< DIV:	"/">
|	< EQ:	"==">
|	< EXP:	"^">
|	< GE:	">=">
|	< GT:	">">
|	< LE:	"<=">
|	< LT:	"<">
|	< LSQUARE:	"[">
|	< LPAREN:	"(">
|	< NE:	"<>">
|	< PROD:	"*">
|	< RSQUARE:	"]">
|	< RPAREN:	")">
|	< SEMICOL:	";">
|	< SUB:	"-">
}
TOKEN :
{
	< AND:"AND">
|	< AS:"AS">
|	< BOOL:"BOOL">
|	< BY:"BY">
|	< DEC:"DEC">
|	< DO:"DO">
|	< ELIF:"ELIF">
|	< ELSE:"ELSE">
|	< FI:"FI">
|	< FOR:"FOR">
|	< FOREACH:"FOREACH">
|	< FROM:"FROM">
|	< FUN:"FUN">
|	< IF:"IF">
|	< IN:"IN">
|	< INT:"INT">
|	< ISA:"ISA">
|	< NOT:"NOT">
|	< NUF:"NUF">
|	< OD:"OD">
|	< OR:"OR">
|	< POLYN:"POLYN">
|	< PRINT:"PRINT">
|	< RETURN:"RETURN">
|	< STOP:"STOP">
|	< THEN:"THEN">
|	< TO:"TO">
|	< VAR:"VAR">
|	< WHILE:"WHILE">
|	< X:"X">

| <PRINTLN:"PRINTLN">
}

TOKEN :
{
	< #DIGIT:	["0"-"9"]>
|	< #LETTER:	["a"-"z","A"-"Z"]>
|	< BOOLEAN:	("TRUE" |"FALSE") >
|	< INTEGER:	(<DIGIT>)+ >
|	< IDENTIFIER:	<LETTER>(<LETTER>|<DIGIT>)* >
}

// ---------------------- PROCESSING STRING TOKEN ----------------------------

MORE:
{   <"\"" >    : INSTRING
}
<INSTRING> MORE:
{   < "\\\\" >
|   < "\\\"" >
|   < "\\t" >
|   < "\\n" >
}
<INSTRING> TOKEN:
{   <STRING: "\""> : DEFAULT
}
<INSTRING> MORE:
{
    < ["0"-"9"] >
|   < ["a"-"z","A"-"Z"] >
|   < ["`", "~", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "=", "+"] >
|   < ["[", "{", "]", "}", "|"] >
|   < [";", ":", "'"] >
|   < ["," , "<" , "." , ">" , "/" , "?", " "] >
}

// ---------------------- PROCESSING COMMENTS     ----------------------------

SPECIAL_TOKEN : {
        <COMMENT_SINGlE: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    }




//---------------------------- Grammer ----------------------------

SimpleNode start() throws ParseException       :
{}
{

LOOKAHEAD(3) statement()
    { return (SimpleNode) (jjtree.popNode()); }
|  expression() <SEMICOL>
    { return (SimpleNode) (jjtree.popNode()); }
|   < EOF > {throw new ParseException("End of File.");}
}

void statement()      :
{}
{


(
if_stat()

| fn_decl()
| var_decl()

| LOOKAHEAD(2) printfn_call()
| LOOKAHEAD(2) printlnfn_call()
| LOOKAHEAD(2) fn_call()
| LOOKAHEAD(2) assignment()

| for_stat()
| foreach_stat()
| while_stat()

| stop_stat()
| return_stat()
| print_stat() )

<SEMICOL>

}


void var_decl():
{/*@bgen(jjtree) var_decl */
  ASTvar_decl jjtn000 = new ASTvar_decl(JJTVAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) var_decl */
try {
/*@egen*/

<VAR> ident_list() type_decl()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void ident_list():
{/*@bgen(jjtree) ident_list */
  ASTident_list jjtn000 = new ASTident_list(JJTIDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ident_list */
try {
/*@egen*/

identifier()  (<COMMA> identifier())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}



void type_decl()      :
{}
{

<AS> type()

}




void type()       :
{}
{/*@bgen(jjtree) boolType */
  {
    ASTboolType jjtn001 = new ASTboolType(JJTBOOLTYPE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/

  <BOOL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          

|/*@bgen(jjtree) polType */
  {
    ASTpolType jjtn002 = new ASTpolType(JJTPOLTYPE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/ <POLYN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/         

|/*@bgen(jjtree) intType */
  {
    ASTintType jjtn003 = new ASTintType(JJTINTTYPE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/ <INT>/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/         

}




void fn_decl	():
{/*@bgen(jjtree) fn_decl */
  ASTfn_decl jjtn000 = new ASTfn_decl(JJTFN_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_decl */
try {
/*@egen*/

<FUN> identifier() <LPAREN>  ( param_decls() )?   <RPAREN> ( type_decl() )?  body()  <NUF>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}



void param_decls():
{/*@bgen(jjtree) param_decls */
  ASTparam_decls jjtn000 = new ASTparam_decls(JJTPARAM_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decls */
try {
/*@egen*/

param_decl() ( <COMMA> param_decl())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}



void param_decl():
{/*@bgen(jjtree) param_decl */
  ASTparam_decl jjtn000 = new ASTparam_decl(JJTPARAM_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param_decl */
try {
/*@egen*/

identifier()  type_decl()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}




void body():
{/*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) body */
try {
/*@egen*/

( statement())*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void assignment():
{/*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignment */
try {
/*@egen*/

identifier() <ASSIGN> expression()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void if_stat():
{/*@bgen(jjtree) if_stat */
  ASTif_stat jjtn000 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) if_stat */
try {
/*@egen*/

<IF>  condition() <THEN> clause() elifs() (<ELSE> clause())?  <FI>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}



void elifs()      :
{}
{

( elif() condition() <THEN> clause() )*

}



void clause():
{/*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) clause */
try {
/*@egen*/

(statement())+/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}



void for_stat():
{/*@bgen(jjtree) for_stat */
  ASTfor_stat jjtn000 = new ASTfor_stat(JJTFOR_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) for_stat */
try {
/*@egen*/

<FOR>  identifier() <FROM> expression()  <TO> expression()  (<BY> expression())? <DO> body() <OD>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void foreach_stat():
{/*@bgen(jjtree) foreach_stat */
  ASTforeach_stat jjtn000 = new ASTforeach_stat(JJTFOREACH_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) foreach_stat */
try {
/*@egen*/

<FOREACH> identifier() <IN> expression() <DO> body() <OD>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void while_stat():
{/*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) while_stat */
try {
/*@egen*/

<WHILE> condition() <DO> body() <OD>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}



void printfn_call():
{/*@bgen(jjtree) printfn_call */
  ASTprintfn_call jjtn000 = new ASTprintfn_call(JJTPRINTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) printfn_call */
try {
/*@egen*/

<PRINT> <LPAREN> (parameters())? <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void printlnfn_call():
{/*@bgen(jjtree) printlnfn_call */
  ASTprintlnfn_call jjtn000 = new ASTprintlnfn_call(JJTPRINTLNFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) printlnfn_call */
try {
/*@egen*/

<PRINTLN> <LPAREN> (parameters())? <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void fn_call():
{/*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fn_call */
try {
/*@egen*/

identifier() <LPAREN> (parameters())? <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}



void parameters():
{/*@bgen(jjtree) parameters */
  ASTparameters jjtn000 = new ASTparameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameters */
try {
/*@egen*/

expression() ( <COMMA>  expression() )*/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void stop_stat():
{/*@bgen(jjtree) stop_stat */
  ASTstop_stat jjtn000 = new ASTstop_stat(JJTSTOP_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) stop_stat */
try {
/*@egen*/

<STOP> identifier()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void return_stat():
{/*@bgen(jjtree) return_stat */
  ASTreturn_stat jjtn000 = new ASTreturn_stat(JJTRETURN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) return_stat */
 try {
/*@egen*/

 LOOKAHEAD(2) <RETURN> expression()
|/*@bgen(jjtree) NOTHING */
  {
    ASTNOTHING jjtn001 = new ASTNOTHING(JJTNOTHING);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ <RETURN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/          /*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}



void print_stat():
{/*@bgen(jjtree) print_stat */
  ASTprint_stat jjtn000 = new ASTprint_stat(JJTPRINT_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) print_stat */
try {
/*@egen*/

<PRINT> <LPAREN>  print_param() ( <COMMA> print_param() )*  <RPAREN>/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}

void print_param()      :
{}
{

expression()

| string()

}


void condition()      :
{}
{

and_clause() (  LOOKAHEAD(2) <OR> condition() )*

}

void and_clause()      :
{}
{

not_clause() ( LOOKAHEAD(2) <AND> and_clause())*

}


void not_clause()     :
{}
{

<NOT> not_clause()

| LOOKAHEAD(3)<LPAREN> condition() <RPAREN>

| LOOKAHEAD(3) printfn_call()
| LOOKAHEAD(3) printlnfn_call()
| LOOKAHEAD(3) fn_call()

| LOOKAHEAD(2) isatype()

| LOOKAHEAD(2) comparison()



}

void comparison():
{/*@bgen(jjtree) comparison */
  ASTcomparison jjtn000 = new ASTcomparison(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) comparison */
try {
/*@egen*/

expression() comparator() expression()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void comparator()      :
{}
{/*@bgen(jjtree) EQ */
        {
          ASTEQ jjtn001 = new ASTEQ(JJTEQ);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/

	<EQ>/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/    
|/*@bgen(jjtree) NE */
        {
          ASTNE jjtn002 = new ASTNE(JJTNE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/	<NE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
        }
/*@egen*/    
|/*@bgen(jjtree) GE */
        {
          ASTGE jjtn003 = new ASTGE(JJTGE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
        }
        try {
/*@egen*/	<GE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
        }
/*@egen*/    
|/*@bgen(jjtree) GT */
        {
          ASTGT jjtn004 = new ASTGT(JJTGT);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
        }
        try {
/*@egen*/	<GT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
        }
/*@egen*/    
|/*@bgen(jjtree) LE */
        {
          ASTLE jjtn005 = new ASTLE(JJTLE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
        }
        try {
/*@egen*/	<LE>/*@bgen(jjtree)*/
        } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
        }
/*@egen*/    
|/*@bgen(jjtree) LT */
        {
          ASTLT jjtn006 = new ASTLT(JJTLT);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
        }
        try {
/*@egen*/	<LT>/*@bgen(jjtree)*/
        } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
        }
/*@egen*/    

}


void isatype():
{/*@bgen(jjtree) isatype */
  ASTisatype jjtn000 = new ASTisatype(JJTISATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) isatype */
try {
/*@egen*/

term() <ISA> type()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void expression()       :
{}
{

( LOOKAHEAD(2) ( <ADD>|  <SUB> ) )? product() ( LOOKAHEAD(2)( plus() | <SUB> ) expression() )*

}


void product()      :
{}
{

exp() ( LOOKAHEAD(2)(<PROD>|<DIV>) product())*

}

void exp()      :
{}
{

LOOKAHEAD(2) term() <LSQUARE> expression()/*@bgen(jjtree) indexed */
                                           {
                                             ASTindexed jjtn001 = new ASTindexed(JJTINDEXED);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
                                           }
                                           try {
/*@egen*/ <RSQUARE>/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001, true);
                                             }
                                           }
/*@egen*/          

| LOOKAHEAD(2) term() <EXP>/*@bgen(jjtree) exp */
                            {
                              ASTexp jjtn002 = new ASTexp(JJTEXP);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
                            }
                            try {
/*@egen*/ term()/*@bgen(jjtree)*/
                            } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                throw (RuntimeException)jjte002;
                              }
                              if (jjte002 instanceof ParseException) {
                                throw (ParseException)jjte002;
                              }
                              throw (Error)jjte002;
                            } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
                            }
/*@egen*/     

| term()

}


void term()      :
{}
{

<LPAREN> expression() <RPAREN>
| LOOKAHEAD(2) printfn_call()
| LOOKAHEAD(2) printlnfn_call()
  | LOOKAHEAD(2) fn_call()

  | simple_term()


}


void simple_term()       :
{}
{


identifier()

| bool()

| LOOKAHEAD(2) integer()

| polyn()

}


void polyn() :
{/*@bgen(jjtree) polyn */
  ASTpolyn jjtn000 = new ASTpolyn(JJTPOLYN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) polyn */
try {
/*@egen*/

<SUB> polyn_term()/*@bgen(jjtree) minus */
                   {
                     ASTminus jjtn001 = new ASTminus(JJTMINUS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ ( LOOKAHEAD(2) (<ADD> | <SUB>) polyn_term())*/*@bgen(jjtree)*/
                   } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       throw (RuntimeException)jjte001;
                     }
                     if (jjte001 instanceof ParseException) {
                       throw (ParseException)jjte001;
                     }
                     throw (Error)jjte001;
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
                   }
/*@egen*/       

| (<ADD>)? polyn_term()/*@bgen(jjtree) test */
                        {
                          ASTtest jjtn002 = new ASTtest(JJTTEST);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ (LOOKAHEAD(2)( <ADD> |<SUB> ) polyn_term()) */*@bgen(jjtree)*/
                        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            throw (RuntimeException)jjte002;
                          }
                          if (jjte002 instanceof ParseException) {
                            throw (ParseException)jjte002;
                          }
                          throw (Error)jjte002;
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
                        }
/*@egen*/      /*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/

}


void polyn_term()      :
{}
{

LOOKAHEAD(2)
 integer() | (integer() )? <X> (  LOOKAHEAD(2) <EXP> term() )?

}


void identifier() :
{/*@bgen(jjtree) identifier */
 ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) identifier */
  try {
/*@egen*/ t = <IDENTIFIER>/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {jjtn000.jjtSetToken(t);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void integer() :
{/*@bgen(jjtree) integer */
 ASTinteger jjtn000 = new ASTinteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) integer */
  try {
/*@egen*/ t = <INTEGER>/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {jjtn000.jjtSetToken(t);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void bool() :
{/*@bgen(jjtree) bool */
 ASTbool jjtn000 = new ASTbool(JJTBOOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) bool */
  try {
/*@egen*/ t = <BOOLEAN>/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {jjtn000.jjtSetToken(t);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void string() :
{/*@bgen(jjtree) string */
 ASTstring jjtn000 = new ASTstring(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) string */
  try {
/*@egen*/ t = <STRING>/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {jjtn000.jjtSetToken(t);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void elif()      :
{}
{/*@bgen(jjtree) if_stat */
{
  ASTif_stat jjtn001 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
}
try {
/*@egen*/

<ELIF>/*@bgen(jjtree)*/
} finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, true);
  }
}
/*@egen*/         

}

void plus() :
{/*@bgen(jjtree) plus */
  ASTplus jjtn000 = new ASTplus(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) plus */
try {
/*@egen*/
<ADD>/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

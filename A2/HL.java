/* Generated By:JJTree&JavaCC: Do not edit this line. HL.java */
public class HL/*@bgen(jjtree)*/implements HLTreeConstants, HLConstants {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

//---------------------------- Grammer ----------------------------
  static final public SimpleNode start() throws ParseException, ParseException {
    if (jj_2_1(3)) {
      statement();
      {if (true) return (SimpleNode) (jjtree.popNode());}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case LPAREN:
      case SUB:
      case PRINT:
      case X:
      case PRINTLN:
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        expression();
        jj_consume_token(SEMICOL);
      {if (true) return (SimpleNode) (jjtree.popNode());}
        break;
      case 0:
        jj_consume_token(0);
             {if (true) throw new ParseException("End of File.");}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      if_stat();
      break;
    case FUN:
      fn_decl();
      break;
    case VAR:
      var_decl();
      break;
    default:
      jj_la1[1] = jj_gen;
      if (jj_2_2(2)) {
        printfn_call();
      } else if (jj_2_3(2)) {
        printlnfn_call();
      } else if (jj_2_4(2)) {
        fn_call();
      } else if (jj_2_5(2)) {
        assignment();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
          for_stat();
          break;
        case FOREACH:
          foreach_stat();
          break;
        case WHILE:
          while_stat();
          break;
        case STOP:
          stop_stat();
          break;
        case RETURN:
          return_stat();
          break;
        case PRINT:
          print_stat();
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(SEMICOL);
  }

  static final public void var_decl() throws ParseException {
 /*@bgen(jjtree) var_decl */
  ASTvar_decl jjtn000 = new ASTvar_decl(JJTVAR_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAR);
      ident_list();
      type_decl();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void ident_list() throws ParseException {
 /*@bgen(jjtree) ident_list */
  ASTident_list jjtn000 = new ASTident_list(JJTIDENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        jj_consume_token(COMMA);
        identifier();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void type_decl() throws ParseException {
    jj_consume_token(AS);
    type();
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
    ASTboolType jjtn001 = new ASTboolType(JJTBOOLTYPE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(BOOL);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    case POLYN:
    ASTpolType jjtn002 = new ASTpolType(JJTPOLTYPE);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(POLYN);
      } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
      }
      break;
    case INT:
    ASTintType jjtn003 = new ASTintType(JJTINTTYPE);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(INT);
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fn_decl() throws ParseException {
 /*@bgen(jjtree) fn_decl */
  ASTfn_decl jjtn000 = new ASTfn_decl(JJTFN_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUN);
      identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        param_decls();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AS:
        type_decl();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      body();
      jj_consume_token(NUF);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void param_decls() throws ParseException {
 /*@bgen(jjtree) param_decls */
  ASTparam_decls jjtn000 = new ASTparam_decls(JJTPARAM_DECLS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      param_decl();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        jj_consume_token(COMMA);
        param_decl();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void param_decl() throws ParseException {
 /*@bgen(jjtree) param_decl */
  ASTparam_decl jjtn000 = new ASTparam_decl(JJTPARAM_DECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      type_decl();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void body() throws ParseException {
 /*@bgen(jjtree) body */
  ASTbody jjtn000 = new ASTbody(JJTBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case FOREACH:
        case FUN:
        case IF:
        case PRINT:
        case RETURN:
        case STOP:
        case VAR:
        case WHILE:
        case PRINTLN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        statement();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void assignment() throws ParseException {
 /*@bgen(jjtree) assignment */
  ASTassignment jjtn000 = new ASTassignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(ASSIGN);
      expression();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void if_stat() throws ParseException {
 /*@bgen(jjtree) if_stat */
  ASTif_stat jjtn000 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      condition();
      jj_consume_token(THEN);
      clause();
      elifs();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        clause();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(FI);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void elifs() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELIF:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      elif();
      condition();
      jj_consume_token(THEN);
      clause();
    }
  }

  static final public void clause() throws ParseException {
 /*@bgen(jjtree) clause */
  ASTclause jjtn000 = new ASTclause(JJTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        statement();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FOR:
        case FOREACH:
        case FUN:
        case IF:
        case PRINT:
        case RETURN:
        case STOP:
        case VAR:
        case WHILE:
        case PRINTLN:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void for_stat() throws ParseException {
 /*@bgen(jjtree) for_stat */
  ASTfor_stat jjtn000 = new ASTfor_stat(JJTFOR_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      identifier();
      jj_consume_token(FROM);
      expression();
      jj_consume_token(TO);
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BY:
        jj_consume_token(BY);
        expression();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void foreach_stat() throws ParseException {
 /*@bgen(jjtree) foreach_stat */
  ASTforeach_stat jjtn000 = new ASTforeach_stat(JJTFOREACH_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOREACH);
      identifier();
      jj_consume_token(IN);
      expression();
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void while_stat() throws ParseException {
 /*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(DO);
      body();
      jj_consume_token(OD);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void printfn_call() throws ParseException {
 /*@bgen(jjtree) printfn_call */
  ASTprintfn_call jjtn000 = new ASTprintfn_call(JJTPRINTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case LPAREN:
      case SUB:
      case PRINT:
      case X:
      case PRINTLN:
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        parameters();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void printlnfn_call() throws ParseException {
 /*@bgen(jjtree) printlnfn_call */
  ASTprintlnfn_call jjtn000 = new ASTprintlnfn_call(JJTPRINTLNFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINTLN);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case LPAREN:
      case SUB:
      case PRINT:
      case X:
      case PRINTLN:
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        parameters();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void fn_call() throws ParseException {
 /*@bgen(jjtree) fn_call */
  ASTfn_call jjtn000 = new ASTfn_call(JJTFN_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      identifier();
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case LPAREN:
      case SUB:
      case PRINT:
      case X:
      case PRINTLN:
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        parameters();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void parameters() throws ParseException {
 /*@bgen(jjtree) parameters */
  ASTparameters jjtn000 = new ASTparameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        expression();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void stop_stat() throws ParseException {
 /*@bgen(jjtree) stop_stat */
  ASTstop_stat jjtn000 = new ASTstop_stat(JJTSTOP_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STOP);
      identifier();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void return_stat() throws ParseException {
 /*@bgen(jjtree) return_stat */
  ASTreturn_stat jjtn000 = new ASTreturn_stat(JJTRETURN_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2)) {
        jj_consume_token(RETURN);
        expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
    ASTNOTHING jjtn001 = new ASTNOTHING(JJTNOTHING);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(RETURN);
          } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
          }
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void print_stat() throws ParseException {
 /*@bgen(jjtree) print_stat */
  ASTprint_stat jjtn000 = new ASTprint_stat(JJTPRINT_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      print_param();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        print_param();
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void print_param() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD:
    case LPAREN:
    case SUB:
    case PRINT:
    case X:
    case PRINTLN:
    case BOOLEAN:
    case INTEGER:
    case IDENTIFIER:
      expression();
      break;
    case STRING:
      string();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition() throws ParseException {
    and_clause();
    label_8:
    while (true) {
      if (jj_2_7(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(OR);
      condition();
    }
  }

  static final public void and_clause() throws ParseException {
    not_clause();
    label_9:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_9;
      }
      jj_consume_token(AND);
      and_clause();
    }
  }

  static final public void not_clause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      not_clause();
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_9(3)) {
        jj_consume_token(LPAREN);
        condition();
        jj_consume_token(RPAREN);
      } else if (jj_2_10(3)) {
        printfn_call();
      } else if (jj_2_11(3)) {
        printlnfn_call();
      } else if (jj_2_12(3)) {
        fn_call();
      } else if (jj_2_13(2)) {
        isatype();
      } else if (jj_2_14(2)) {
        comparison();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void comparison() throws ParseException {
 /*@bgen(jjtree) comparison */
  ASTcomparison jjtn000 = new ASTcomparison(JJTCOMPARISON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expression();
      comparator();
      expression();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
          ASTEQ jjtn001 = new ASTEQ(JJTEQ);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(EQ);
      } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      break;
    case NE:
          ASTNE jjtn002 = new ASTNE(JJTNE);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(NE);
      } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, true);
          }
      }
      break;
    case GE:
          ASTGE jjtn003 = new ASTGE(JJTGE);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(GE);
      } finally {
          if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
      }
      break;
    case GT:
          ASTGT jjtn004 = new ASTGT(JJTGT);
          boolean jjtc004 = true;
          jjtree.openNodeScope(jjtn004);
      try {
        jj_consume_token(GT);
      } finally {
          if (jjtc004) {
            jjtree.closeNodeScope(jjtn004, true);
          }
      }
      break;
    case LE:
          ASTLE jjtn005 = new ASTLE(JJTLE);
          boolean jjtc005 = true;
          jjtree.openNodeScope(jjtn005);
      try {
        jj_consume_token(LE);
      } finally {
          if (jjtc005) {
            jjtree.closeNodeScope(jjtn005, true);
          }
      }
      break;
    case LT:
          ASTLT jjtn006 = new ASTLT(JJTLT);
          boolean jjtc006 = true;
          jjtree.openNodeScope(jjtn006);
      try {
        jj_consume_token(LT);
      } finally {
          if (jjtc006) {
            jjtree.closeNodeScope(jjtn006, true);
          }
      }
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void isatype() throws ParseException {
 /*@bgen(jjtree) isatype */
  ASTisatype jjtn000 = new ASTisatype(JJTISATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      term();
      jj_consume_token(ISA);
      type();
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void expression() throws ParseException {
    if (jj_2_15(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        break;
      case SUB:
        jj_consume_token(SUB);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    product();
    label_10:
    while (true) {
      if (jj_2_16(2)) {
        ;
      } else {
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        plus();
        break;
      case SUB:
        jj_consume_token(SUB);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression();
    }
  }

  static final public void product() throws ParseException {
    exp();
    label_11:
    while (true) {
      if (jj_2_17(2)) {
        ;
      } else {
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROD:
        jj_consume_token(PROD);
        break;
      case DIV:
        jj_consume_token(DIV);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      product();
    }
  }

  static final public void exp() throws ParseException {
    if (jj_2_18(2)) {
      term();
      jj_consume_token(LSQUARE);
      expression();
                                             ASTindexed jjtn001 = new ASTindexed(JJTINDEXED);
                                             boolean jjtc001 = true;
                                             jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RSQUARE);
      } finally {
                                             if (jjtc001) {
                                               jjtree.closeNodeScope(jjtn001, true);
                                             }
      }
    } else if (jj_2_19(2)) {
      term();
      jj_consume_token(EXP);
                              ASTexp jjtn002 = new ASTexp(JJTEXP);
                              boolean jjtc002 = true;
                              jjtree.openNodeScope(jjtn002);
      try {
        term();
      } catch (Throwable jjte002) {
                              if (jjtc002) {
                                jjtree.clearNodeScope(jjtn002);
                                jjtc002 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte002 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte002;}
                              }
                              if (jjte002 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte002;}
                              }
                              {if (true) throw (Error)jjte002;}
      } finally {
                              if (jjtc002) {
                                jjtree.closeNodeScope(jjtn002, true);
                              }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case LPAREN:
      case SUB:
      case PRINT:
      case X:
      case PRINTLN:
      case BOOLEAN:
      case INTEGER:
      case IDENTIFIER:
        term();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_20(2)) {
        printfn_call();
      } else if (jj_2_21(2)) {
        printlnfn_call();
      } else if (jj_2_22(2)) {
        fn_call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUB:
        case X:
        case BOOLEAN:
        case INTEGER:
        case IDENTIFIER:
          simple_term();
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void simple_term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      identifier();
      break;
    case BOOLEAN:
      bool();
      break;
    default:
      jj_la1[28] = jj_gen;
      if (jj_2_23(2)) {
        integer();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
        case SUB:
        case X:
        case INTEGER:
          polyn();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void polyn() throws ParseException {
 /*@bgen(jjtree) polyn */
  ASTpolyn jjtn000 = new ASTpolyn(JJTPOLYN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUB:
        jj_consume_token(SUB);
        polyn_term();
                     ASTminus jjtn001 = new ASTminus(JJTMINUS);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
        try {
          label_12:
          while (true) {
            if (jj_2_24(2)) {
              ;
            } else {
              break label_12;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ADD:
              jj_consume_token(ADD);
              break;
            case SUB:
              jj_consume_token(SUB);
              break;
            default:
              jj_la1[30] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            polyn_term();
          }
        } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
        } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001, true);
                     }
        }
        break;
      case ADD:
      case X:
      case INTEGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ADD:
          jj_consume_token(ADD);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        polyn_term();
                          ASTtest jjtn002 = new ASTtest(JJTTEST);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
        try {
          label_13:
          while (true) {
            if (jj_2_25(2)) {
              ;
            } else {
              break label_13;
            }
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ADD:
              jj_consume_token(ADD);
              break;
            case SUB:
              jj_consume_token(SUB);
              break;
            default:
              jj_la1[32] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            polyn_term();
          }
        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte002;}
                          }
                          if (jjte002 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte002;}
                          }
                          {if (true) throw (Error)jjte002;}
        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002, true);
                          }
        }
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void polyn_term() throws ParseException {
    if (jj_2_27(2)) {
      integer();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case X:
      case INTEGER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          integer();
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        jj_consume_token(X);
        if (jj_2_26(2)) {
          jj_consume_token(EXP);
          term();
        } else {
          ;
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void identifier() throws ParseException {
 /*@bgen(jjtree) identifier */
 ASTidentifier jjtn000 = new ASTidentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  jjtn000.jjtSetToken(t);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void integer() throws ParseException {
 /*@bgen(jjtree) integer */
 ASTinteger jjtn000 = new ASTinteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  jjtn000.jjtSetToken(t);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void bool() throws ParseException {
 /*@bgen(jjtree) bool */
 ASTbool jjtn000 = new ASTbool(JJTBOOL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BOOLEAN);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  jjtn000.jjtSetToken(t);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void string() throws ParseException {
 /*@bgen(jjtree) string */
 ASTstring jjtn000 = new ASTstring(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  jjtn000.jjtSetToken(t);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void elif() throws ParseException {
  ASTif_stat jjtn001 = new ASTif_stat(JJTIF_STAT);
  boolean jjtc001 = true;
  jjtree.openNodeScope(jjtn001);
    try {
      jj_consume_token(ELIF);
    } finally {
  if (jjtc001) {
    jjtree.closeNodeScope(jjtn001, true);
  }
    }
  }

  static final public void plus() throws ParseException {
 /*@bgen(jjtree) plus */
  ASTplus jjtn000 = new ASTplus(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ADD);
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_76()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_69()) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(X)) return true;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(STOP)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_59()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(SEMICOL)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(PRINTLN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_80()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(EXP)) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(FROM)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(LSQUARE)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_45()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_26()) return true;
    if (jj_scan_token(ISA)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_19()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(FUN)) return true;
    if (jj_3R_38()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_scan_token(AS)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(EXP)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x410021,0x0,0x0,0x80,0x2000000,0x0,0x1000000,0x80,0x0,0x40000000,0x20000000,0x0,0x4000000,0x410020,0x410020,0x410020,0x80,0x0,0x80,0x410020,0x0,0x27a00,0x400020,0x400020,0x40100,0x410020,0x10000,0x400020,0x0,0x400020,0x400020,0x20,0x400020,0x400020,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7302000,0x40018,0x8e003,0x0,0x1040,0x4000000,0x0,0x0,0x42ce01b,0x0,0x0,0x42ce01b,0x0,0x7302000,0x7302000,0x7302000,0x0,0x4000,0x0,0x7302000,0x100,0x0,0x0,0x0,0x0,0x7302000,0x0,0x7100000,0x5000000,0x2100000,0x0,0x0,0x0,0x2100000,0x2000000,0x2100000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[27];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HL(HLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[72];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 72; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 27; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
